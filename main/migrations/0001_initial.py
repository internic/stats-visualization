# Generated by Django 5.0 on 2024-01-03 06:44

import django.db.models.deletion
from django.db import migrations, models


class Migration(migrations.Migration):
    initial = True

    dependencies = []

    operations = [
        migrations.CreateModel(
            name="Household",
            fields=[
                (
                    "hhid",
                    models.IntegerField(
                        primary_key=True, serialize=False, verbose_name="Household ID"
                    ),
                ),
                ("inter", models.IntegerField(verbose_name="Interviewer Code")),
                ("superv", models.IntegerField(verbose_name="Supervisor Code")),
                (
                    "lang",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Interview Language",
                    ),
                ),
                (
                    "int_date",
                    models.DateField(
                        blank=True, null=True, verbose_name="Interview Date"
                    ),
                ),
                (
                    "int_begt",
                    models.TimeField(
                        blank=True,
                        null=True,
                        verbose_name="Beginning Time of the Interview",
                    ),
                ),
                (
                    "int_fint",
                    models.TimeField(
                        blank=True,
                        null=True,
                        verbose_name="Completion Time of the Interview",
                    ),
                ),
                (
                    "int_dur",
                    models.CharField(
                        blank=True,
                        max_length=5,
                        null=True,
                        verbose_name="Length of the Interview, hh.mm",
                    ),
                ),
                (
                    "presence",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Other Person(s) Present?",
                    ),
                ),
                (
                    "estim",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Response Quality Estimations 1-Bad to 5-Great",
                    ),
                ),
                (
                    "comment",
                    models.TextField(
                        blank=True, null=True, verbose_name="Interviewer's Comment"
                    ),
                ),
                (
                    "rezult",
                    models.CharField(
                        blank=True,
                        max_length=255,
                        null=True,
                        verbose_name="Result of the Interview",
                    ),
                ),
                (
                    "oblast",
                    models.CharField(
                        blank=True, max_length=100, null=True, verbose_name="Oblast"
                    ),
                ),
                (
                    "residence",
                    models.CharField(
                        blank=True,
                        max_length=100,
                        null=True,
                        verbose_name="Type of Population Point",
                    ),
                ),
                (
                    "psu",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Primary Sampling Unit"
                    ),
                ),
                (
                    "soate",
                    models.BigIntegerField(
                        blank=True, null=True, verbose_name="Population Point Code"
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdAsset",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "asset",
                    models.IntegerField(
                        choices=[
                            (1, "Main Dwelling"),
                            (2, "Another House/Apartment"),
                            (3, "Garage"),
                            (4, "Bicycle"),
                            (5, "Motorcycle, Scooter"),
                            (6, "Car, Minibus"),
                            (7, "Tractor"),
                            (8, "Truck"),
                            (9, "Other Agricultural Machine"),
                            (10, "Refrigerator"),
                            (11, "Gas Stove"),
                            (12, "Electric Stove"),
                            (13, "Microwave"),
                            (14, "Air Conditioner"),
                            (15, "Sewing Machine"),
                            (16, "Washing Machine (Regular)"),
                            (17, "Washing Machine (Automated)"),
                            (18, "Vacuum Cleaner"),
                            (19, "Sofa"),
                            (20, "Wardrobe"),
                            (21, "Kitchen Furniture"),
                            (22, "Radio / Cassette Player"),
                            (23, "Complete Music System"),
                            (24, "Television"),
                            (25, "Video / DVD Player"),
                            (26, "Video Camera"),
                            (27, "Photo Camera"),
                            (28, "Digital Photo Camera"),
                            (29, "Personal Computer / Laptop"),
                            (30, "Tablet"),
                            (31, "Satellite Dish"),
                            (32, "Mobile Phone"),
                            (33, "Smartphone"),
                            (34, "Landline Phone"),
                            (35, "Internet Connection"),
                        ],
                        verbose_name="Asset",
                    ),
                ),
                ("possession", models.BooleanField(verbose_name="Possession")),
                ("quantity", models.IntegerField(verbose_name="Quantity")),
                (
                    "acquisition_method",
                    models.IntegerField(
                        choices=[
                            (1, "Purchased"),
                            (2, "Inherited"),
                            (3, "Given as a Gift"),
                            (4, "Other Means"),
                        ],
                        verbose_name="Acquisition Method",
                    ),
                ),
                (
                    "acquisition_year",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Year of Acquisition"
                    ),
                ),
                (
                    "estimated_value",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Estimated Sale Value",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdClimateChangeResponse",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "climate_change_importance",
                    models.IntegerField(
                        choices=[
                            (1, "Not at all important"),
                            (2, "Slightly important"),
                            (3, "Moderately important"),
                            (4, "Very important"),
                            (99, "Do not know"),
                        ],
                        verbose_name="Importance of Climate Change",
                    ),
                ),
                (
                    "current_effect",
                    models.IntegerField(
                        verbose_name="Current Effect of Climate Change (1-10)"
                    ),
                ),
                (
                    "future_effect",
                    models.IntegerField(
                        verbose_name="Future Effect of Climate Change in Two Years (1-10)"
                    ),
                ),
                (
                    "drought_effect",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Effect of Drought (0-10)"
                    ),
                ),
                (
                    "rain_flood_effect",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Effect of Too Much Rain or Floods (0-10)",
                    ),
                ),
                (
                    "cold_winter_effect",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Effect of Very Cold Winter (0-10)",
                    ),
                ),
                (
                    "frosts_effect",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Effect of Autumn/Spring Frosts (0-10)",
                    ),
                ),
                (
                    "heat_wave_effect",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Effect of High Temperature/Heat Wave (0-10)",
                    ),
                ),
                (
                    "action_1",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 1 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_2",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 2 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_3",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 3 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_4",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 4 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_5",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 5 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_6",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 6 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_7",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 7 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_8",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 8 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_9",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 9 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_10",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 10 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_11",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 11 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_12",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 12 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_13",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 13 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_14",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 14 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "action_15",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Planted different crops"),
                            (2, "Changed agricultural practices"),
                            (3, "Migration"),
                            (4, "Savings"),
                            (5, "Retrainings"),
                            (6, "Made different investments"),
                            (7, "Correct/separated sorting of waste"),
                            (8, "Community work day (Subbotniks)"),
                            (9, "Eating habits change (became a vegetarian)"),
                            (10, "Reducing the amount of plastic"),
                            (11, "Conducting regular vehicle inspections"),
                            (12, "Water saving"),
                            (13, "Tree planting"),
                            (14, "House insulation to reduce coal/wood consumption"),
                            (15, "Other measures"),
                            (99, "Do not know"),
                        ],
                        null=True,
                        verbose_name="Action 15 to Reduce Climate Change Role",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdFinance",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "savings",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        verbose_name="Made Financial Savings in Last 12 Months",
                    ),
                ),
                (
                    "investment_1",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Cash savings kept at home"),
                            (2, "Call deposits (interest-free)"),
                            (3, "Fixed-term bank deposits"),
                            (4, "Purchased foreign currency"),
                            (5, "Lending as a private loan"),
                            (6, "Other"),
                        ],
                        null=True,
                        verbose_name="First Investment Type",
                    ),
                ),
                (
                    "investment_2",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Cash savings kept at home"),
                            (2, "Call deposits (interest-free)"),
                            (3, "Fixed-term bank deposits"),
                            (4, "Purchased foreign currency"),
                            (5, "Lending as a private loan"),
                            (6, "Other"),
                        ],
                        null=True,
                        verbose_name="Second Investment Type",
                    ),
                ),
                (
                    "investment_3",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Cash savings kept at home"),
                            (2, "Call deposits (interest-free)"),
                            (3, "Fixed-term bank deposits"),
                            (4, "Purchased foreign currency"),
                            (5, "Lending as a private loan"),
                            (6, "Other"),
                        ],
                        null=True,
                        verbose_name="Third Investment Type",
                    ),
                ),
                (
                    "savings_purpose",
                    models.IntegerField(
                        choices=[
                            (1, "To earn additional income"),
                            (2, "To insure for unexpected events"),
                            (3, "To accumulate to purchase real estate"),
                            (4, "To accumulate to purchase a durable asset"),
                            (5, "To accumulate for leisure"),
                            (6, "To spend for education or healthcare"),
                            (7, "Other purpose"),
                        ],
                        verbose_name="Purpose of Making Savings",
                    ),
                ),
                (
                    "loan_taken",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No"), (99, "Don't Know")],
                        verbose_name="Taken a Loan in Last 12 Months",
                    ),
                ),
                (
                    "loan_amount",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Original Amount of Loan",
                    ),
                ),
                (
                    "loan_remaining",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Remaining Loan Amount",
                    ),
                ),
                (
                    "loan_interest_rate",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Annual Interest Rate for Loan",
                    ),
                ),
                (
                    "loan_repay_date_known",
                    models.IntegerField(
                        blank=True,
                        choices=[(99, "Don't Know")],
                        null=True,
                        verbose_name="Knows Loan Repay Date",
                    ),
                ),
                (
                    "loan_repay_month",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Loan Repay Month"
                    ),
                ),
                (
                    "loan_repay_year",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="Loan Repay Year"
                    ),
                ),
                (
                    "loan_source",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Private person"),
                            (2, "Commercial bank"),
                            (3, "Commercial organization"),
                            (4, "Microcredit agency"),
                            (5, "Credit union"),
                            (6, "Other sources"),
                            (99, "Don't know"),
                        ],
                        null=True,
                        verbose_name="Loan Source",
                    ),
                ),
                (
                    "loan_purpose",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Build a house"),
                            (2, "Purchase a house/flat/land plot"),
                            (3, "Cover the household's current living costs"),
                            (4, "Start business"),
                            (5, "Pay tuition fees for education"),
                            (6, "Pay for healthcare services"),
                            (7, "Purchase agricultural machinery, seeds"),
                            (
                                8,
                                "Purchase livestock and/or equipment related to livestock production",
                            ),
                            (9, "Cover expenses on customs (weddings, funerals etc)"),
                            (10, "Other purpose"),
                            (99, "Don't know"),
                        ],
                        null=True,
                        verbose_name="Purpose of Loan",
                    ),
                ),
                (
                    "applied_for_loan",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        verbose_name="Applied for Loan",
                    ),
                ),
                (
                    "received_loan_everytime",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        verbose_name="Received Loan Every Time Applied",
                    ),
                ),
                (
                    "loan_rejection_reason",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Lack of collateral"),
                            (2, "Not able to pay back"),
                            (3, "Credit line was exhausted"),
                            (4, "Other reason"),
                            (99, "Don't Know"),
                        ],
                        null=True,
                        verbose_name="Reason for Loan Rejection",
                    ),
                ),
                (
                    "reason_for_not_applying",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Never needed any credit"),
                            (2, "Too risky to take credit"),
                            (3, "Interest rate was too high"),
                            (4, "No collateral"),
                            (5, "Religious reasons"),
                            (6, "Other reasons"),
                        ],
                        null=True,
                        verbose_name="Reason for Not Applying for Loan",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdFoodConsumption",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "food_item",
                    models.IntegerField(
                        choices=[
                            (1, "Bread"),
                            (2, "Flour (all types)"),
                            (3, "Noodle products"),
                            (4, "Rice"),
                            (5, "Buckwheat"),
                            (6, "Other cereal and beans"),
                            (7, "Potato"),
                            (8, "Tomato"),
                            (9, "Cucumber"),
                            (10, "Pepper"),
                            (11, "Eggplants"),
                            (12, "Carrot"),
                            (13, "Cabbage"),
                            (14, "Onion"),
                            (15, "Other vegetables"),
                            (16, "Apples and pear"),
                            (17, "Grapes"),
                            (18, "Bananas"),
                            (19, "Citrus products"),
                            (20, "Watermelon and melon"),
                            (21, "Other fruits and berries"),
                            (22, "Fresh milk"),
                            (23, "Kefir"),
                            (24, "Airan"),
                            (25, "Sour cream"),
                            (26, "Butter"),
                            (27, "Margarine"),
                            (28, "Cheese, cottage cheese"),
                            (29, "Eggs"),
                            (30, "Fish"),
                            (31, "Chicken"),
                            (32, "Beef"),
                            (33, "Lamb"),
                            (34, "Horse meat"),
                            (35, "Pork"),
                            (36, "Sausages"),
                            (37, "Cooking oil"),
                            (38, "Sugar"),
                            (39, "Sweets"),
                            (40, "Cookies"),
                            (41, "Honey"),
                            (42, "Jam"),
                            (43, "Tea (black/green)"),
                            (44, "Coffee"),
                            (45, "Non-alcoholic beverages"),
                            (46, "Beer"),
                            (47, "Vodka"),
                            (48, "Cigarettes"),
                        ],
                        verbose_name="Food Item",
                    ),
                ),
                (
                    "quantity_bought",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=10,
                        verbose_name="Quantity of Items Bought in Last 12 Months",
                    ),
                ),
                (
                    "unit_of_measurement",
                    models.IntegerField(
                        choices=[
                            (1, "kg"),
                            (2, "litre"),
                            (3, "pieces"),
                            (4, "gram"),
                            (5, "pack"),
                        ],
                        verbose_name="Units of Measurement",
                    ),
                ),
                (
                    "total_expense",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        verbose_name="Total Expenses on Items Bought (in Soms)",
                    ),
                ),
                (
                    "consumption_period_bought",
                    models.IntegerField(
                        choices=[(1, "per week"), (2, "per month"), (3, "per year")],
                        verbose_name="Period of Consumption for Bought Items",
                    ),
                ),
                (
                    "quantity_own",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=10,
                        null=True,
                        verbose_name="Quantity of Item Consumed from Own Production in Last 12 Months",
                    ),
                ),
                (
                    "consumption_period_own",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "per week"), (2, "per month"), (3, "per year")],
                        null=True,
                        verbose_name="Period of Consumption for Own Products",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdIncome",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "income_source",
                    models.IntegerField(
                        choices=[
                            (1, "Crop farming enterprises"),
                            (
                                2,
                                "Other agricultural enterprises (e.g., sale of livestock/poultry)",
                            ),
                            (
                                3,
                                "Individual entrepreneurship (excl. taxes and payments)",
                            ),
                            (4, "Other enterprises (non-agricultural)"),
                            (
                                5,
                                "Income from wage employment (excl. taxes and deductions)",
                            ),
                            (
                                6,
                                "Bonuses and other payments (excl. taxes and deductions)",
                            ),
                            (7, "Irregular one-time work"),
                            (
                                8,
                                "Money transfers from household members who were in migration abroad",
                            ),
                            (
                                9,
                                "Money transfers from abroad from persons who are not household members",
                            ),
                            (
                                10,
                                "Aid from persons in Kyrgyzstan who are not household members",
                            ),
                            (
                                11,
                                "Humanitarian assistance from NGOs, international organizations",
                            ),
                            (12, "Rents from accommodation/building(s)"),
                            (13, "Rents from land"),
                            (14, "Inheritance"),
                            (15, "Alimony"),
                            (16, "Scholarships"),
                            (17, "Other income"),
                        ],
                        verbose_name="Income Source",
                    ),
                ),
                (
                    "received_income",
                    models.BooleanField(
                        verbose_name="Received Any Income from This Source"
                    ),
                ),
                (
                    "average_monthly_income",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Average Monthly Income (Soms)",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdNonFoodExpenditure",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "non_food_item",
                    models.IntegerField(
                        choices=[
                            (1, "Clothing, accessories and hats"),
                            (2, "Shoes"),
                            (3, "Fabrics"),
                            (4, "Soap, detergents"),
                            (5, "Personal care items and cosmetics"),
                            (6, "Medicines"),
                            (7, "Medical care, dental care"),
                            (8, "Cell phone fees"),
                            (9, "Stationary phone fees"),
                            (10, "Transportation services"),
                            (11, "Electricity bills"),
                            (12, "Cold water and sewage"),
                            (13, "Hot water"),
                            (14, "Central heating"),
                            (15, "Gas (natural and liquefied)"),
                            (16, "Petrol/diesel and other fuel for private vehicle"),
                            (17, "Coal and other solid fuel for heating"),
                            (18, "Taxes and social benefit plan contributions"),
                            (19, "Entertainment, recreation, eating out"),
                            (20, "Celebrations, funerals, rituals"),
                            (
                                21,
                                "Expenses for education, sports sections, clubs, etc.",
                            ),
                            (22, "Cable TV and Internet"),
                            (23, "Construction and maintenance/repair of housing"),
                            (24, "Maintenance and repair of vehicles and appliances"),
                            (25, "Jewellery"),
                            (26, "Kitchen utensils and household goods"),
                            (27, "Building materials, plumbing"),
                            (28, "Furniture and interior equipment"),
                            (29, "TV and radio equipment and spare parts"),
                            (30, "Electric and household appliances"),
                            (31, "Computers and office equipment"),
                            (32, "Auto vehicles"),
                            (33, "Other non-food goods and services"),
                        ],
                        verbose_name="Non-Food Expenditure Item",
                    ),
                ),
                (
                    "expenditure_amount",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=12,
                        verbose_name="Expenditure Amount (Soms)",
                    ),
                ),
                (
                    "expenditure_period",
                    models.IntegerField(
                        choices=[(1, "per month"), (2, "per year")],
                        verbose_name="Expenditure Period",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdProperty",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "new_hh",
                    models.BooleanField(verbose_name="New HH Joined LiK in 2019"),
                ),
                (
                    "change_in_dwelling",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No"), (3, "Don't Know")],
                        verbose_name="Change in Dwelling Since November 2016",
                    ),
                ),
                (
                    "housing_type",
                    models.IntegerField(
                        choices=[
                            (1, "Separate Apartment"),
                            (2, "Separate House or Part of It"),
                            (3, "Other Type of Dwelling"),
                        ],
                        verbose_name="Type of Housing",
                    ),
                ),
                (
                    "dwelling_acquisition",
                    models.IntegerField(
                        choices=[
                            (1, "Purchased"),
                            (2, "Built"),
                            (3, "Bartered"),
                            (4, "Inherited"),
                            (5, "Given by state/privatize"),
                            (6, "Rented"),
                        ],
                        verbose_name="How and When Dwelling Acquired",
                    ),
                ),
                (
                    "settlement_year",
                    models.IntegerField(verbose_name="Year of Settling in House"),
                ),
                (
                    "num_rooms",
                    models.IntegerField(
                        verbose_name="Number of Rooms Available to Live In"
                    ),
                ),
                (
                    "total_area",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=7,
                        verbose_name="Total Area of Dwelling (sq. meters)",
                    ),
                ),
                (
                    "living_area",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=7,
                        verbose_name="Living Area of Dwelling (sq. meters)",
                    ),
                ),
                (
                    "main_wall_material",
                    models.IntegerField(
                        choices=[
                            (1, "Mud/earth"),
                            (2, "Burnt bricks"),
                            (4, "Cement blocks/Concrete"),
                            (5, "Wood"),
                            (6, "Other"),
                        ],
                        verbose_name="Main Construction Material of the Walls",
                    ),
                ),
                (
                    "main_roof_material",
                    models.IntegerField(
                        choices=[
                            (1, "Metal sheets"),
                            (2, "Tiles"),
                            (3, "Slate"),
                            (5, "Other"),
                        ],
                        verbose_name="Main Construction Material of the Roof",
                    ),
                ),
                (
                    "main_drinking_water_source",
                    models.IntegerField(
                        choices=[
                            (1, "Public water pipe"),
                            (2, "Water pipe inside of the dwelling"),
                            (3, "Public water plumbing"),
                            (4, "Artesian or water well"),
                            (5, "Dam lake, river, lake, pounder, aryk"),
                            (6, "Other"),
                        ],
                        verbose_name="Main Source of Drinking Water",
                    ),
                ),
                (
                    "water_source_location",
                    models.IntegerField(
                        choices=[(1, "In the yard"), (2, "On the street")],
                        verbose_name="Location of Drinking Water Source",
                    ),
                ),
                (
                    "water_source_distance",
                    models.IntegerField(
                        choices=[
                            (1, "Less than 100 m"),
                            (2, "101-200 m"),
                            (3, "201-500 m"),
                            (4, "501-1000 m"),
                            (5, "More than 1000 m"),
                        ],
                        verbose_name="Distance to Drinking Water Source",
                    ),
                ),
                (
                    "water_quality",
                    models.IntegerField(
                        choices=[
                            (1, "Excellent"),
                            (2, "Mostly good"),
                            (3, "Sometimes good, but some other times bad"),
                            (4, "Poor"),
                            (5, "Very poor"),
                        ],
                        verbose_name="Quality of Drinking Water",
                    ),
                ),
                (
                    "main_heating_source",
                    models.IntegerField(
                        choices=[
                            (1, "Central heating"),
                            (2, "Electric heating (installed-type equipment)"),
                            (3, "Stove heating"),
                            (4, "Electric heating (transportable-type equipment)"),
                            (5, "Gas heating"),
                            (6, "No heating"),
                            (7, "Other"),
                        ],
                        verbose_name="Main Source of Heating",
                    ),
                ),
                (
                    "heating_months",
                    models.IntegerField(verbose_name="Months of Heating Last Winter"),
                ),
                (
                    "electricity_disruption",
                    models.IntegerField(
                        choices=[
                            (1, "Never"),
                            (2, "Several times a year"),
                            (3, "Once a month"),
                            (4, "Once a week"),
                            (5, "Several times a week"),
                            (6, "Everyday"),
                            (7, "No power supply at all"),
                        ],
                        verbose_name="Frequency of Electricity Disruption",
                    ),
                ),
                (
                    "main_cooking_method",
                    models.IntegerField(
                        choices=[
                            (1, "Tandyr/oven"),
                            (2, "Gas stove with pipe supply"),
                            (3, "Gas stove with balloons"),
                            (4, "Electric stove"),
                            (5, "Small electric hot plate (plitka)"),
                            (6, "Other"),
                        ],
                        verbose_name="Main Cooking Method",
                    ),
                ),
                (
                    "bathing_facility",
                    models.IntegerField(
                        choices=[
                            (1, "Own bathroom with shower"),
                            (2, "Separate shower"),
                            (3, "Own sauna"),
                            (4, "Public sauna"),
                            (5, "Other"),
                            (6, "Go to relatives or friends"),
                        ],
                        verbose_name="Bathing Facility",
                    ),
                ),
                (
                    "transport_station_time",
                    models.IntegerField(
                        choices=[
                            (1, "Less than 5 min"),
                            (2, "6-15 min"),
                            (3, "16-30 min"),
                            (4, "31-60 min"),
                            (5, "More than 1 hour"),
                        ],
                        verbose_name="Time to Nearest Public Transport Station",
                    ),
                ),
                (
                    "distance_to_main_road",
                    models.IntegerField(verbose_name="Distance to Main Road (meters)"),
                ),
                (
                    "distance_to_livestock_market",
                    models.IntegerField(
                        verbose_name="Distance to Livestock Market (meters)"
                    ),
                ),
                (
                    "distance_to_town_hall",
                    models.IntegerField(verbose_name="Distance to Town Hall (meters)"),
                ),
                (
                    "distance_to_school",
                    models.IntegerField(verbose_name="Distance to School (meters)"),
                ),
                (
                    "distance_to_hospital",
                    models.IntegerField(verbose_name="Distance to Hospital (meters)"),
                ),
                (
                    "distance_to_pharmacy",
                    models.IntegerField(verbose_name="Distance to Pharmacy (meters)"),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdShock",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "shock",
                    models.IntegerField(
                        choices=[
                            (1, "Drought"),
                            (2, "Too much rain or flood"),
                            (3, "Very cold winter"),
                            (4, "Frosts"),
                            (5, "Landslides"),
                            (6, "Pest or diseases (crops or livestock)"),
                            (7, "Fire"),
                            (8, "Insufficient water supply for farming or gardening"),
                            (9, "Political instability"),
                            (10, "Theft of assets (cash, crops, livestock)"),
                            (11, "Inability to sell agricultural and other products"),
                            (12, "Loss of job"),
                            (13, "Sharp fall of remittances from abroad"),
                            (14, "Death of a major breadwinner"),
                            (15, "Death of another HH member"),
                            (16, "Death of close relative, non-member of HH"),
                            (17, "Illness of a major breadwinner"),
                            (18, "Illness of another HH member"),
                            (19, "Divorce"),
                            (20, "Disputes on land issues"),
                            (21, "Accident"),
                            (22, "Insufficient energy supply"),
                            (23, "Increased violence in the neighbourhood"),
                            (24, "Border closure for the movement of people and goods"),
                            (25, "Forced relocation"),
                        ],
                        verbose_name="Name of Shock",
                    ),
                ),
                (
                    "affected_by_shock",
                    models.BooleanField(
                        verbose_name="Affected by Shocks in Last 12 Months"
                    ),
                ),
                (
                    "shock_impact",
                    models.IntegerField(
                        choices=[
                            (1, "High"),
                            (2, "Medium"),
                            (3, "Low"),
                            (4, "No impact"),
                        ],
                        verbose_name="Severity of Shock Impact",
                    ),
                ),
                (
                    "extra_expenses",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Extra Expenses Due to Shock",
                    ),
                ),
                (
                    "income_loss",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Loss of Income Due to Shock",
                    ),
                ),
                (
                    "major_coping_activity_1",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Worked more"),
                            (2, "HH member migrated"),
                            (3, "Sold assets (livestock, land, car)"),
                            (4, "Borrowed money"),
                            (5, "Other activity"),
                            (6, "Did nothing"),
                        ],
                        null=True,
                        verbose_name="#1 Major Coping Activity",
                    ),
                ),
                (
                    "major_coping_activity_2",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Worked more"),
                            (2, "HH member migrated"),
                            (3, "Sold assets (livestock, land, car)"),
                            (4, "Borrowed money"),
                            (5, "Other activity"),
                            (6, "Did nothing"),
                        ],
                        null=True,
                        verbose_name="#2 Major Coping Activity",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="HouseholdTransfer",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "transfer_type",
                    models.IntegerField(
                        choices=[
                            (1, "Old-age pension (Kyrgyz pension)"),
                            (2, "Old-age pension (pensions from other countries)"),
                            (3, "Disability pension"),
                            (
                                4,
                                "Pension on favorable terms for special working conditions",
                            ),
                            (5, "Survivor's pension"),
                            (6, 'Newborn child allowance "Suiunchu"'),
                            (
                                7,
                                "Unified monthly allowance to low-income families and individuals, cash",
                            ),
                            (8, "Insurance benefit"),
                            (
                                9,
                                "Social monthly allowance (children with disabilities, heroine mothers, disabled since childhood, children of the deceased breadwinner)",
                            ),
                            (10, "Unemployment benefit"),
                            (11, "Other allowances"),
                            (12, "For public transportation"),
                            (13, "Medicaments"),
                            (
                                14,
                                "Maintenance of children in preschool institutions, child education",
                            ),
                            (15, "Other benefits"),
                        ],
                        verbose_name="Transfer Type",
                    ),
                ),
                (
                    "received_transfer",
                    models.BooleanField(
                        verbose_name="Received Any Income from This Transfer"
                    ),
                ),
                (
                    "average_monthly_transfer",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=12,
                        null=True,
                        verbose_name="Average Monthly Transfer Amount (Soms)",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Individual",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("pid", models.IntegerField(verbose_name="Individual Code")),
                (
                    "gender",
                    models.IntegerField(
                        choices=[(1, "Male"), (2, "Female")], verbose_name="Gender"
                    ),
                ),
                ("birth_month", models.IntegerField(verbose_name="Month of Birth")),
                ("birth_year", models.IntegerField(verbose_name="Year of Birth")),
                ("age", models.IntegerField(verbose_name="Age in Full Years")),
                (
                    "relationship",
                    models.IntegerField(verbose_name="Relationship to the HH Head"),
                ),
                ("ethnicity", models.IntegerField(verbose_name="Ethnicity")),
                ("marital_status", models.IntegerField(verbose_name="Marital Status")),
                (
                    "spouse_id",
                    models.IntegerField(
                        blank=True, null=True, verbose_name="ID of a Spouse/Partner"
                    ),
                ),
                (
                    "stayed_with_hh",
                    models.IntegerField(verbose_name="Stayed with the HH Last Week?"),
                ),
                (
                    "not_stay_reason",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Reason for Not Staying in HH",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="Education",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("age", models.IntegerField(verbose_name="Age in Years")),
                (
                    "first_language",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Kyrgyz"),
                            (2, "Uzbek"),
                            (3, "Russian"),
                            (4, "English"),
                            (5, "Turkish"),
                            (6, "German"),
                            (7, "Chinese"),
                            (8, "Others"),
                        ],
                        null=True,
                        verbose_name="First Language",
                    ),
                ),
                (
                    "second_language",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Kyrgyz"),
                            (2, "Uzbek"),
                            (3, "Russian"),
                            (4, "English"),
                            (5, "Turkish"),
                            (6, "German"),
                            (7, "Chinese"),
                            (8, "Others"),
                        ],
                        null=True,
                        verbose_name="Second Language",
                    ),
                ),
                (
                    "third_language",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Kyrgyz"),
                            (2, "Uzbek"),
                            (3, "Russian"),
                            (4, "English"),
                            (5, "Turkish"),
                            (6, "German"),
                            (7, "Chinese"),
                            (8, "Others"),
                        ],
                        null=True,
                        verbose_name="Third Language",
                    ),
                ),
                (
                    "enrolled",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="Currently Enrolled at an Educational Institution",
                    ),
                ),
                (
                    "not_studying_reason",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "Costs Too Much"),
                            (2, "Illness"),
                            (3, "Doesn't Like Studying"),
                            (4, "Works to Support Family"),
                            (5, "Will Start School in 1-2 Years"),
                            (6, "Finished"),
                            (7, "Political Unrest"),
                            (8, "Other Reasons"),
                        ],
                        null=True,
                        verbose_name="Reason for Not Studying",
                    ),
                ),
                (
                    "current_level",
                    models.IntegerField(
                        blank=True,
                        choices=[
                            (1, "At a General School (Grade 1-11)"),
                            (2, "Professional Technical"),
                            (
                                3,
                                "Secondary Special (Schools with Specialized Curriculum)",
                            ),
                            (4, "University (Bachelor, MA)"),
                        ],
                        null=True,
                        verbose_name="Current Level of Enrollment",
                    ),
                ),
                (
                    "current_grade",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Current Grade of Enrollment",
                    ),
                ),
                (
                    "attending",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Yes"), (2, "No")],
                        null=True,
                        verbose_name="Currently Attending the Institution",
                    ),
                ),
                (
                    "school_fees",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="School Fees/Tuition Expenditure (Past Academic Year)",
                    ),
                ),
                (
                    "uniforms_supplies",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Uniforms/Supplies Expenditure (Past Academic Year)",
                    ),
                ),
                (
                    "non_formal_payments",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Non-Formal Payments Expenditure (Past Academic Year)",
                    ),
                ),
                (
                    "tutoring_payments",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Tutoring and Payments to Staff (Past Academic Year)",
                    ),
                ),
                (
                    "total_schooling_expenditure",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Total Schooling Expenditure (Past Academic Year)",
                    ),
                ),
                (
                    "homework_hours_daily",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Daily Homework Hours (Past Academic Year)",
                    ),
                ),
                (
                    "help_at_home_hours_daily",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Daily Hours Helping at Home/Business/Farm (Past Academic Year)",
                    ),
                ),
                (
                    "outside_work_hours_daily",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Daily Hours Working Outside for Money (Past Academic Year)",
                    ),
                ),
                (
                    "computer_use_hours_weekly",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Weekly Hours of Computer Use for Studies (Past Academic Year)",
                    ),
                ),
                (
                    "missing_teachers",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Number of Specific Subject Teachers Missing (Past Academic Year)",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
                (
                    "pid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.individual",
                        verbose_name="Individual Code",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChildHealthDetails",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                (
                    "medical_card",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="Has Medical Card for Vaccinations",
                    ),
                ),
                (
                    "vaccinations",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="Had Any Vaccinations",
                    ),
                ),
                (
                    "bcg_vaccination",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="Had BCG Vaccination Against Tuberculosis",
                    ),
                ),
                (
                    "polio_vaccine",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="Had Polio Vaccine",
                    ),
                ),
                (
                    "disability_illness",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="Has Disability or Long Term Limiting Illness",
                    ),
                ),
                (
                    "doctor_consultations",
                    models.IntegerField(
                        verbose_name="Number of Doctor Consultations in Last 12 Months"
                    ),
                ),
                (
                    "hospital_nights",
                    models.IntegerField(
                        verbose_name="Nights Spent in Hospital in Last 12 Months"
                    ),
                ),
                (
                    "birth_place",
                    models.IntegerField(
                        choices=[
                            (2, "Issyk-kul oblast"),
                            (3, "Jalal-Abad oblast"),
                            (4, "Naryn oblast"),
                            (5, "Batken oblast"),
                            (6, "Osh oblast"),
                            (7, "Talas oblast"),
                            (8, "Chui oblast"),
                            (11, "Bishkek (Frunze)"),
                            (21, "Osh city"),
                            (66, "Outside of Kyrgyzstan"),
                        ],
                        verbose_name="Place of Birth",
                    ),
                ),
                (
                    "birth_certificate",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No"), (99, "Don't know")],
                        verbose_name="Has Birth Certificate",
                    ),
                ),
                (
                    "mother_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Mother's Code from HH Roster",
                    ),
                ),
                (
                    "father_id",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Father's Code from HH Roster",
                    ),
                ),
                (
                    "weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Weight in kg",
                    ),
                ),
                (
                    "clothes_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Weight of Child's Clothes in grams",
                    ),
                ),
                (
                    "height",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Height in cm",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
                (
                    "pid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.individual",
                        verbose_name="Individual Code",
                    ),
                ),
            ],
        ),
        migrations.CreateModel(
            name="ChildHealth",
            fields=[
                (
                    "id",
                    models.BigAutoField(
                        auto_created=True,
                        primary_key=True,
                        serialize=False,
                        verbose_name="ID",
                    ),
                ),
                ("age", models.IntegerField(verbose_name="Age in Years")),
                (
                    "measured_status",
                    models.IntegerField(
                        choices=[
                            (1, "All Measured"),
                            (2, "Partly Measured"),
                            (3, "Child not present"),
                            (4, "Parent refused"),
                            (5, "Other"),
                        ],
                        verbose_name="Status of Being Measured",
                    ),
                ),
                (
                    "weighing_method",
                    models.IntegerField(
                        choices=[
                            (1, "With a Parent"),
                            (2, "Alone"),
                            (3, "Not Measured"),
                        ],
                        verbose_name="Child Weighed Alone or With Parent",
                    ),
                ),
                (
                    "child_weight",
                    models.DecimalField(
                        decimal_places=2,
                        max_digits=5,
                        verbose_name="Child Weight (kg.g)",
                    ),
                ),
                (
                    "minimum_undressing",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No")],
                        verbose_name="Child Undressed to the Minimum",
                    ),
                ),
                (
                    "parent_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Parent Weight (kg.g)",
                    ),
                ),
                (
                    "combined_weight",
                    models.DecimalField(
                        blank=True,
                        decimal_places=2,
                        max_digits=5,
                        null=True,
                        verbose_name="Combined Weight of Parent and Child (kg.g)",
                    ),
                ),
                (
                    "combined_undressing",
                    models.IntegerField(
                        blank=True,
                        choices=[(1, "Yes"), (2, "No")],
                        null=True,
                        verbose_name="Parent and Child Undressed to the Minimum",
                    ),
                ),
                ("height", models.IntegerField(verbose_name="Height (cm)")),
                (
                    "measurement_method",
                    models.IntegerField(
                        choices=[(1, "Lying Down"), (2, "Standing Up")],
                        verbose_name="Measurement Method",
                    ),
                ),
                (
                    "arm_circumference",
                    models.IntegerField(
                        verbose_name="Mid-Upper Arm Circumference (mm)"
                    ),
                ),
                (
                    "measured_arm",
                    models.IntegerField(
                        choices=[(1, "Left"), (2, "Right")], verbose_name="Measured Arm"
                    ),
                ),
                (
                    "breastfed_at_birth",
                    models.IntegerField(
                        choices=[(1, "Yes"), (2, "No"), (99, "Don't Know")],
                        verbose_name="Breastfed at Birth",
                    ),
                ),
                (
                    "breastfeeding_duration",
                    models.IntegerField(
                        blank=True,
                        null=True,
                        verbose_name="Breastfeeding Duration (months)",
                    ),
                ),
                (
                    "hhid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.household",
                        verbose_name="Household ID",
                    ),
                ),
                (
                    "pid",
                    models.ForeignKey(
                        on_delete=django.db.models.deletion.CASCADE,
                        to="main.individual",
                        verbose_name="Individual Code",
                    ),
                ),
            ],
        ),
    ]
